
0_try1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000007f0  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  080009b8  080009b8  000109b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000a34  08000a34  00010a3c  2**0
                  CONTENTS
  4 .ARM          00000000  08000a34  08000a34  00010a3c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000a34  08000a3c  00010a3c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000a34  08000a34  00010a34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000a38  08000a38  00010a38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010a3c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000078  20000000  08000a3c  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000078  08000a3c  00020078  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010a3c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001455  00000000  00000000  00010a6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000069f  00000000  00000000  00011ec1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000170  00000000  00000000  00012560  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000118  00000000  00000000  000126d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000004b1  00000000  00000000  000127e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000018a6  00000000  00000000  00012c99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009b062  00000000  00000000  0001453f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000af5a1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000414  00000000  00000000  000af5f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000000 	.word	0x20000000
 80001e4:	00000000 	.word	0x00000000
 80001e8:	080009a0 	.word	0x080009a0

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000004 	.word	0x20000004
 8000204:	080009a0 	.word	0x080009a0

08000208 <gpio_setup>:

void gpio_setup_porta(void);
void gpio_setup_portb(void);
void gpio_setup_porti(void);

void gpio_setup(void) {
 8000208:	b580      	push	{r7, lr}
 800020a:	af00      	add	r7, sp, #0
	gpio_setup_porta();
 800020c:	f000 f806 	bl	800021c <gpio_setup_porta>
	gpio_setup_portb();
 8000210:	f000 f830 	bl	8000274 <gpio_setup_portb>
	gpio_setup_porti();
 8000214:	f000 f85a 	bl	80002cc <gpio_setup_porti>
}
 8000218:	bf00      	nop
 800021a:	bd80      	pop	{r7, pc}

0800021c <gpio_setup_porta>:

void gpio_setup_porta(void) {
 800021c:	b480      	push	{r7}
 800021e:	af00      	add	r7, sp, #0
	/*
	 * PA9 USART1 TX
	 */
	GPIOA->MODER = (GPIOA->MODER & ~(GPIO_MODER_MODER9_0)) | GPIO_MODER_MODER9_1; //PA9 set to alternate function
 8000220:	4b13      	ldr	r3, [pc, #76]	; (8000270 <gpio_setup_porta+0x54>)
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8000228:	4a11      	ldr	r2, [pc, #68]	; (8000270 <gpio_setup_porta+0x54>)
 800022a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800022e:	6013      	str	r3, [r2, #0]
	GPIOA->AFR[1] = (GPIOA->AFR[1] & ~(1U << 7)) | (0x07 << 4); //PA9 to AF7
 8000230:	4b0f      	ldr	r3, [pc, #60]	; (8000270 <gpio_setup_porta+0x54>)
 8000232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000234:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000238:	4a0d      	ldr	r2, [pc, #52]	; (8000270 <gpio_setup_porta+0x54>)
 800023a:	f043 0370 	orr.w	r3, r3, #112	; 0x70
 800023e:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOA->OTYPER &= ~GPIO_OTYPER_OT9; //PA9 output push-pull
 8000240:	4b0b      	ldr	r3, [pc, #44]	; (8000270 <gpio_setup_porta+0x54>)
 8000242:	685b      	ldr	r3, [r3, #4]
 8000244:	4a0a      	ldr	r2, [pc, #40]	; (8000270 <gpio_setup_porta+0x54>)
 8000246:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800024a:	6053      	str	r3, [r2, #4]
	GPIOA->OSPEEDR |= GPIO_OSPEEDR_OSPEEDR9; //PA9 output speed very high
 800024c:	4b08      	ldr	r3, [pc, #32]	; (8000270 <gpio_setup_porta+0x54>)
 800024e:	689b      	ldr	r3, [r3, #8]
 8000250:	4a07      	ldr	r2, [pc, #28]	; (8000270 <gpio_setup_porta+0x54>)
 8000252:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
 8000256:	6093      	str	r3, [r2, #8]
	GPIOA->PUPDR &= ~GPIO_PUPDR_PUPDR9; //PA9 no pull-up no pull-down
 8000258:	4b05      	ldr	r3, [pc, #20]	; (8000270 <gpio_setup_porta+0x54>)
 800025a:	68db      	ldr	r3, [r3, #12]
 800025c:	4a04      	ldr	r2, [pc, #16]	; (8000270 <gpio_setup_porta+0x54>)
 800025e:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8000262:	60d3      	str	r3, [r2, #12]

}
 8000264:	bf00      	nop
 8000266:	46bd      	mov	sp, r7
 8000268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop
 8000270:	40020000 	.word	0x40020000

08000274 <gpio_setup_portb>:
void gpio_setup_portb(void) {
 8000274:	b480      	push	{r7}
 8000276:	af00      	add	r7, sp, #0
	/*
	 * PB7 USART1 RX
	 */
	GPIOB->MODER = (GPIOB->MODER & ~(GPIO_MODER_MODER7_0)) | (GPIO_MODER_MODER7_1); //PB7 set to alternate function
 8000278:	4b13      	ldr	r3, [pc, #76]	; (80002c8 <gpio_setup_portb+0x54>)
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000280:	4a11      	ldr	r2, [pc, #68]	; (80002c8 <gpio_setup_portb+0x54>)
 8000282:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000286:	6013      	str	r3, [r2, #0]
	GPIOB->AFR[0] = (GPIOB->AFR[0] & ~(1U << 31)) | (0x07 << 28); //PB7 to AF7
 8000288:	4b0f      	ldr	r3, [pc, #60]	; (80002c8 <gpio_setup_portb+0x54>)
 800028a:	6a1b      	ldr	r3, [r3, #32]
 800028c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8000290:	4a0d      	ldr	r2, [pc, #52]	; (80002c8 <gpio_setup_portb+0x54>)
 8000292:	f043 43e0 	orr.w	r3, r3, #1879048192	; 0x70000000
 8000296:	6213      	str	r3, [r2, #32]
	GPIOB->OTYPER &= ~(GPIO_OTYPER_OT_7); //PB7 output push-pull
 8000298:	4b0b      	ldr	r3, [pc, #44]	; (80002c8 <gpio_setup_portb+0x54>)
 800029a:	685b      	ldr	r3, [r3, #4]
 800029c:	4a0a      	ldr	r2, [pc, #40]	; (80002c8 <gpio_setup_portb+0x54>)
 800029e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80002a2:	6053      	str	r3, [r2, #4]
	GPIOB->OSPEEDR |= (GPIO_OSPEEDR_OSPEEDR7); //PB7 output speed very high
 80002a4:	4b08      	ldr	r3, [pc, #32]	; (80002c8 <gpio_setup_portb+0x54>)
 80002a6:	689b      	ldr	r3, [r3, #8]
 80002a8:	4a07      	ldr	r2, [pc, #28]	; (80002c8 <gpio_setup_portb+0x54>)
 80002aa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80002ae:	6093      	str	r3, [r2, #8]
	GPIOB->PUPDR &= ~(GPIO_PUPDR_PUPDR7); //PB7 no pull-up no pull-down
 80002b0:	4b05      	ldr	r3, [pc, #20]	; (80002c8 <gpio_setup_portb+0x54>)
 80002b2:	68db      	ldr	r3, [r3, #12]
 80002b4:	4a04      	ldr	r2, [pc, #16]	; (80002c8 <gpio_setup_portb+0x54>)
 80002b6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80002ba:	60d3      	str	r3, [r2, #12]

}
 80002bc:	bf00      	nop
 80002be:	46bd      	mov	sp, r7
 80002c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c4:	4770      	bx	lr
 80002c6:	bf00      	nop
 80002c8:	40020400 	.word	0x40020400

080002cc <gpio_setup_porti>:
void gpio_setup_porti(void) {
 80002cc:	b480      	push	{r7}
 80002ce:	af00      	add	r7, sp, #0
	/*
	 *  PI1 GREEN LED LD1 ACTIVE HIGH
	 * */
	GPIOI->MODER = (GPIOI->MODER & ~(1U << 3U)) | (1U << 2U); //PI1 set to general purpose output mode
 80002d0:	4b0f      	ldr	r3, [pc, #60]	; (8000310 <gpio_setup_porti+0x44>)
 80002d2:	681b      	ldr	r3, [r3, #0]
 80002d4:	f023 030c 	bic.w	r3, r3, #12
 80002d8:	4a0d      	ldr	r2, [pc, #52]	; (8000310 <gpio_setup_porti+0x44>)
 80002da:	f043 0304 	orr.w	r3, r3, #4
 80002de:	6013      	str	r3, [r2, #0]
	GPIOI->OTYPER &= ~(GPIO_OTYPER_OT_1); //PI1 output push-pull
 80002e0:	4b0b      	ldr	r3, [pc, #44]	; (8000310 <gpio_setup_porti+0x44>)
 80002e2:	685b      	ldr	r3, [r3, #4]
 80002e4:	4a0a      	ldr	r2, [pc, #40]	; (8000310 <gpio_setup_porti+0x44>)
 80002e6:	f023 0302 	bic.w	r3, r3, #2
 80002ea:	6053      	str	r3, [r2, #4]
	GPIOI->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEEDR1); //PI1 output speed very low
 80002ec:	4b08      	ldr	r3, [pc, #32]	; (8000310 <gpio_setup_porti+0x44>)
 80002ee:	689b      	ldr	r3, [r3, #8]
 80002f0:	4a07      	ldr	r2, [pc, #28]	; (8000310 <gpio_setup_porti+0x44>)
 80002f2:	f023 030c 	bic.w	r3, r3, #12
 80002f6:	6093      	str	r3, [r2, #8]
	GPIOI->PUPDR &= ~(GPIO_PUPDR_PUPDR1); //PI1 no pull-up no pull-down
 80002f8:	4b05      	ldr	r3, [pc, #20]	; (8000310 <gpio_setup_porti+0x44>)
 80002fa:	68db      	ldr	r3, [r3, #12]
 80002fc:	4a04      	ldr	r2, [pc, #16]	; (8000310 <gpio_setup_porti+0x44>)
 80002fe:	f023 030c 	bic.w	r3, r3, #12
 8000302:	60d3      	str	r3, [r2, #12]
}
 8000304:	bf00      	nop
 8000306:	46bd      	mov	sp, r7
 8000308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop
 8000310:	40022000 	.word	0x40022000

08000314 <blink_ld1>:

void blink_ld1(void) {
 8000314:	b480      	push	{r7}
 8000316:	b083      	sub	sp, #12
 8000318:	af00      	add	r7, sp, #0
	GPIOI->ODR |= GPIO_ODR_OD1; //set PI1 to high
 800031a:	4b0e      	ldr	r3, [pc, #56]	; (8000354 <blink_ld1+0x40>)
 800031c:	695b      	ldr	r3, [r3, #20]
 800031e:	4a0d      	ldr	r2, [pc, #52]	; (8000354 <blink_ld1+0x40>)
 8000320:	f043 0302 	orr.w	r3, r3, #2
 8000324:	6153      	str	r3, [r2, #20]
	for (uint32_t i = 0; i < 10000U; i++); //lame delay
 8000326:	2300      	movs	r3, #0
 8000328:	607b      	str	r3, [r7, #4]
 800032a:	e002      	b.n	8000332 <blink_ld1+0x1e>
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	3301      	adds	r3, #1
 8000330:	607b      	str	r3, [r7, #4]
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	f242 720f 	movw	r2, #9999	; 0x270f
 8000338:	4293      	cmp	r3, r2
 800033a:	d9f7      	bls.n	800032c <blink_ld1+0x18>
	GPIOI->ODR &= ~GPIO_ODR_OD1; //set PI1 to low
 800033c:	4b05      	ldr	r3, [pc, #20]	; (8000354 <blink_ld1+0x40>)
 800033e:	695b      	ldr	r3, [r3, #20]
 8000340:	4a04      	ldr	r2, [pc, #16]	; (8000354 <blink_ld1+0x40>)
 8000342:	f023 0302 	bic.w	r3, r3, #2
 8000346:	6153      	str	r3, [r2, #20]
}
 8000348:	bf00      	nop
 800034a:	370c      	adds	r7, #12
 800034c:	46bd      	mov	sp, r7
 800034e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000352:	4770      	bx	lr
 8000354:	40022000 	.word	0x40022000

08000358 <main>:
#include "main.h"

int main(void) {
 8000358:	b5b0      	push	{r4, r5, r7, lr}
 800035a:	b0a0      	sub	sp, #128	; 0x80
 800035c:	af00      	add	r7, sp, #0

	/*
	 * HARDWARE SETUP
	 * */
	rcc_setup(); //clock for peripheral, clock will not be altered; therefore default HSI 16MHz clock even with external oscillator connected
 800035e:	f000 f92f 	bl	80005c0 <rcc_setup>
	gpio_setup(); //set pin modes and functions
 8000362:	f7ff ff51 	bl	8000208 <gpio_setup>
	usart_it_setup(USART1); //set control registers and settings for uart1
 8000366:	482f      	ldr	r0, [pc, #188]	; (8000424 <main+0xcc>)
 8000368:	f000 f9aa 	bl	80006c0 <usart_it_setup>
	usart_enable(USART1); //enable uart1
 800036c:	482d      	ldr	r0, [pc, #180]	; (8000424 <main+0xcc>)
 800036e:	f000 f973 	bl	8000658 <usart_enable>
	usart_enable_tx(USART1); //enable tx line (wrapper)
 8000372:	482c      	ldr	r0, [pc, #176]	; (8000424 <main+0xcc>)
 8000374:	f000 f980 	bl	8000678 <usart_enable_tx>
	usart_enable_rx(USART1); //enable rx line (wrapper)
 8000378:	482a      	ldr	r0, [pc, #168]	; (8000424 <main+0xcc>)
 800037a:	f000 f98f 	bl	800069c <usart_enable_rx>
	nvic_setup(); //set interrupts and their priorities
 800037e:	f000 f895 	bl	80004ac <nvic_setup>


	uint8_t message1[] = "Hello! Enter a line into circular buffer of length 8. "; //20 symbols
 8000382:	4b29      	ldr	r3, [pc, #164]	; (8000428 <main+0xd0>)
 8000384:	f107 0448 	add.w	r4, r7, #72	; 0x48
 8000388:	461d      	mov	r5, r3
 800038a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800038c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800038e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000390:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000392:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000394:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000396:	e895 0003 	ldmia.w	r5, {r0, r1}
 800039a:	6020      	str	r0, [r4, #0]
 800039c:	3404      	adds	r4, #4
 800039e:	8021      	strh	r1, [r4, #0]
 80003a0:	3402      	adds	r4, #2
 80003a2:	0c0b      	lsrs	r3, r1, #16
 80003a4:	7023      	strb	r3, [r4, #0]
	uint8_t message2[] = "If element [3] is not 0, it will print the buffer back\r\n";
 80003a6:	4b21      	ldr	r3, [pc, #132]	; (800042c <main+0xd4>)
 80003a8:	f107 040c 	add.w	r4, r7, #12
 80003ac:	461d      	mov	r5, r3
 80003ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80003b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80003b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80003b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80003b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80003b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80003ba:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80003be:	c403      	stmia	r4!, {r0, r1}
 80003c0:	7022      	strb	r2, [r4, #0]

	//Welcome message using ring TX buffer
	usart_it_sendArray(USART1, message1, sizeof(message1) - 1U); // size-1 because I want no end of line char (returns number of elements put in buffer array)
 80003c2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80003c6:	2236      	movs	r2, #54	; 0x36
 80003c8:	4619      	mov	r1, r3
 80003ca:	4816      	ldr	r0, [pc, #88]	; (8000424 <main+0xcc>)
 80003cc:	f000 f9ce 	bl	800076c <usart_it_sendArray>
	while (uart1_it_tx_getBufferFreeSpace() < (sizeof(message2) - 1U)); //wait while TX ring buffer has just enough space for the second line (but not fully empty)
 80003d0:	bf00      	nop
 80003d2:	f000 fa25 	bl	8000820 <uart1_it_tx_getBufferFreeSpace>
 80003d6:	4603      	mov	r3, r0
 80003d8:	2b37      	cmp	r3, #55	; 0x37
 80003da:	d9fa      	bls.n	80003d2 <main+0x7a>
	usart_it_sendArray(USART1, message2, sizeof(message2) - 1U); // size-1 because I want no end of line char
 80003dc:	f107 030c 	add.w	r3, r7, #12
 80003e0:	2238      	movs	r2, #56	; 0x38
 80003e2:	4619      	mov	r1, r3
 80003e4:	480f      	ldr	r0, [pc, #60]	; (8000424 <main+0xcc>)
 80003e6:	f000 f9c1 	bl	800076c <usart_it_sendArray>

	uint8_t myReceiveBuffer[8] = { '0', '0', '0', '0', '0', '0', '0', '0' }; //setting up default values character '0'
 80003ea:	4a11      	ldr	r2, [pc, #68]	; (8000430 <main+0xd8>)
 80003ec:	1d3b      	adds	r3, r7, #4
 80003ee:	e892 0003 	ldmia.w	r2, {r0, r1}
 80003f2:	e883 0003 	stmia.w	r3, {r0, r1}
	usart_it_receiveArray(USART1, myReceiveBuffer, 8, UART_IT_RX_BUFFER_CIRCULAR); //activate circular buffer reception, alternative is UART_IT_RX_BUFFER_SINGLE
 80003f6:	1d39      	adds	r1, r7, #4
 80003f8:	2301      	movs	r3, #1
 80003fa:	2208      	movs	r2, #8
 80003fc:	4809      	ldr	r0, [pc, #36]	; (8000424 <main+0xcc>)
 80003fe:	f000 fa35 	bl	800086c <usart_it_receiveArray>
	blink_ld1(); //LED will blink immediately as the program starts, showing this line is executed even before data is received
 8000402:	f7ff ff87 	bl	8000314 <blink_ld1>
	while (myReceiveBuffer[3] == '0'); //keep waiting until myReceiveBuffer[3] is not '0', then print the entire buffer
 8000406:	bf00      	nop
 8000408:	79fb      	ldrb	r3, [r7, #7]
 800040a:	2b30      	cmp	r3, #48	; 0x30
 800040c:	d0fc      	beq.n	8000408 <main+0xb0>
	usart_it_sendArray(USART1, myReceiveBuffer, 8); //send array by putting its data into ring buffer
 800040e:	1d3b      	adds	r3, r7, #4
 8000410:	2208      	movs	r2, #8
 8000412:	4619      	mov	r1, r3
 8000414:	4803      	ldr	r0, [pc, #12]	; (8000424 <main+0xcc>)
 8000416:	f000 f9a9 	bl	800076c <usart_it_sendArray>
	usart_it_stopReceiveArray(USART1); //if you want to stop receiving data into buffer array, call this function; for UART_IT_RX_BUFFER_SINGLE reception is stopped automatically when buffer is full
 800041a:	4802      	ldr	r0, [pc, #8]	; (8000424 <main+0xcc>)
 800041c:	f000 fa62 	bl	80008e4 <usart_it_stopReceiveArray>

	while (1) {
 8000420:	e7fe      	b.n	8000420 <main+0xc8>
 8000422:	bf00      	nop
 8000424:	40011000 	.word	0x40011000
 8000428:	080009b8 	.word	0x080009b8
 800042c:	080009f0 	.word	0x080009f0
 8000430:	08000a2c 	.word	0x08000a2c

08000434 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000434:	b480      	push	{r7}
 8000436:	b083      	sub	sp, #12
 8000438:	af00      	add	r7, sp, #0
 800043a:	4603      	mov	r3, r0
 800043c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800043e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000442:	2b00      	cmp	r3, #0
 8000444:	db0b      	blt.n	800045e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000446:	79fb      	ldrb	r3, [r7, #7]
 8000448:	f003 021f 	and.w	r2, r3, #31
 800044c:	4907      	ldr	r1, [pc, #28]	; (800046c <__NVIC_EnableIRQ+0x38>)
 800044e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000452:	095b      	lsrs	r3, r3, #5
 8000454:	2001      	movs	r0, #1
 8000456:	fa00 f202 	lsl.w	r2, r0, r2
 800045a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800045e:	bf00      	nop
 8000460:	370c      	adds	r7, #12
 8000462:	46bd      	mov	sp, r7
 8000464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000468:	4770      	bx	lr
 800046a:	bf00      	nop
 800046c:	e000e100 	.word	0xe000e100

08000470 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8000470:	b480      	push	{r7}
 8000472:	b083      	sub	sp, #12
 8000474:	af00      	add	r7, sp, #0
 8000476:	4603      	mov	r3, r0
 8000478:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800047a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800047e:	2b00      	cmp	r3, #0
 8000480:	db0c      	blt.n	800049c <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000482:	79fb      	ldrb	r3, [r7, #7]
 8000484:	f003 021f 	and.w	r2, r3, #31
 8000488:	4907      	ldr	r1, [pc, #28]	; (80004a8 <__NVIC_ClearPendingIRQ+0x38>)
 800048a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800048e:	095b      	lsrs	r3, r3, #5
 8000490:	2001      	movs	r0, #1
 8000492:	fa00 f202 	lsl.w	r2, r0, r2
 8000496:	3360      	adds	r3, #96	; 0x60
 8000498:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800049c:	bf00      	nop
 800049e:	370c      	adds	r7, #12
 80004a0:	46bd      	mov	sp, r7
 80004a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a6:	4770      	bx	lr
 80004a8:	e000e100 	.word	0xe000e100

080004ac <nvic_setup>:
#include "nvic.h"

void nvic_setup(void) {
 80004ac:	b580      	push	{r7, lr}
 80004ae:	af00      	add	r7, sp, #0
	NVIC->IP[USART1_IRQn] = (uint8_t) (16U << 4U); //USART1 interrupt priority to 16 (lowest)
 80004b0:	4b04      	ldr	r3, [pc, #16]	; (80004c4 <nvic_setup+0x18>)
 80004b2:	2200      	movs	r2, #0
 80004b4:	f883 2325 	strb.w	r2, [r3, #805]	; 0x325
	NVIC_EnableIRQ(USART1_IRQn);
 80004b8:	2025      	movs	r0, #37	; 0x25
 80004ba:	f7ff ffbb 	bl	8000434 <__NVIC_EnableIRQ>
}
 80004be:	bf00      	nop
 80004c0:	bd80      	pop	{r7, pc}
 80004c2:	bf00      	nop
 80004c4:	e000e100 	.word	0xe000e100

080004c8 <USART1_IRQHandler>:

void USART1_IRQHandler(void) {
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
	NVIC_ClearPendingIRQ(USART1_IRQn); //clear pending flag
 80004cc:	2025      	movs	r0, #37	; 0x25
 80004ce:	f7ff ffcf 	bl	8000470 <__NVIC_ClearPendingIRQ>
	if ((usartpointer1->ISR & USART_ISR_TXE) && (usartpointer1->CR1 & USART_CR1_TXEIE)) { //if send register empty
 80004d2:	4b33      	ldr	r3, [pc, #204]	; (80005a0 <USART1_IRQHandler+0xd8>)
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	69db      	ldr	r3, [r3, #28]
 80004d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80004dc:	2b00      	cmp	r3, #0
 80004de:	d022      	beq.n	8000526 <USART1_IRQHandler+0x5e>
 80004e0:	4b2f      	ldr	r3, [pc, #188]	; (80005a0 <USART1_IRQHandler+0xd8>)
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d01b      	beq.n	8000526 <USART1_IRQHandler+0x5e>
		uart1_tx_buffer_current_element_pointer = (uart1_tx_buffer_current_element_pointer + 1U) % UART_TX_BUFFER_LENGTH; //increment pointer to current element in ring & there was data to send
 80004ee:	4b2d      	ldr	r3, [pc, #180]	; (80005a4 <USART1_IRQHandler+0xdc>)
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	3301      	adds	r3, #1
 80004f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80004f8:	4a2a      	ldr	r2, [pc, #168]	; (80005a4 <USART1_IRQHandler+0xdc>)
 80004fa:	6013      	str	r3, [r2, #0]
		usartpointer1->TDR = uart1_tx_buffer[uart1_tx_buffer_current_element_pointer];
 80004fc:	4b29      	ldr	r3, [pc, #164]	; (80005a4 <USART1_IRQHandler+0xdc>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	4a29      	ldr	r2, [pc, #164]	; (80005a8 <USART1_IRQHandler+0xe0>)
 8000502:	5cd2      	ldrb	r2, [r2, r3]
 8000504:	4b26      	ldr	r3, [pc, #152]	; (80005a0 <USART1_IRQHandler+0xd8>)
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	629a      	str	r2, [r3, #40]	; 0x28
		if (uart1_tx_buffer_current_element_pointer == uart1_tx_buffer_last_element_pointer) {
 800050a:	4b26      	ldr	r3, [pc, #152]	; (80005a4 <USART1_IRQHandler+0xdc>)
 800050c:	681a      	ldr	r2, [r3, #0]
 800050e:	4b27      	ldr	r3, [pc, #156]	; (80005ac <USART1_IRQHandler+0xe4>)
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	429a      	cmp	r2, r3
 8000514:	d107      	bne.n	8000526 <USART1_IRQHandler+0x5e>
			usartpointer1->CR1 &= ~USART_CR1_TXEIE;
 8000516:	4b22      	ldr	r3, [pc, #136]	; (80005a0 <USART1_IRQHandler+0xd8>)
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	681a      	ldr	r2, [r3, #0]
 800051c:	4b20      	ldr	r3, [pc, #128]	; (80005a0 <USART1_IRQHandler+0xd8>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000524:	601a      	str	r2, [r3, #0]
		}

	}
	if ((usartpointer1->ISR & USART_ISR_RXNE) && (usartpointer1->CR1 & USART_CR1_RXNEIE)) { //if receive register not empty & we were expecting data
 8000526:	4b1e      	ldr	r3, [pc, #120]	; (80005a0 <USART1_IRQHandler+0xd8>)
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	69db      	ldr	r3, [r3, #28]
 800052c:	f003 0320 	and.w	r3, r3, #32
 8000530:	2b00      	cmp	r3, #0
 8000532:	d033      	beq.n	800059c <USART1_IRQHandler+0xd4>
 8000534:	4b1a      	ldr	r3, [pc, #104]	; (80005a0 <USART1_IRQHandler+0xd8>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	f003 0320 	and.w	r3, r3, #32
 800053e:	2b00      	cmp	r3, #0
 8000540:	d02c      	beq.n	800059c <USART1_IRQHandler+0xd4>
		uart1_rx_buffer_current_element_pointer++; //increment pointer
 8000542:	4b1b      	ldr	r3, [pc, #108]	; (80005b0 <USART1_IRQHandler+0xe8>)
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	3301      	adds	r3, #1
 8000548:	4a19      	ldr	r2, [pc, #100]	; (80005b0 <USART1_IRQHandler+0xe8>)
 800054a:	6013      	str	r3, [r2, #0]
		uart1_rx_buffer_current_element_pointer %= uart1_rx_buffer_length; //if pointer overflow, reset
 800054c:	4b18      	ldr	r3, [pc, #96]	; (80005b0 <USART1_IRQHandler+0xe8>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	4a18      	ldr	r2, [pc, #96]	; (80005b4 <USART1_IRQHandler+0xec>)
 8000552:	6812      	ldr	r2, [r2, #0]
 8000554:	fbb3 f1f2 	udiv	r1, r3, r2
 8000558:	fb02 f201 	mul.w	r2, r2, r1
 800055c:	1a9b      	subs	r3, r3, r2
 800055e:	4a14      	ldr	r2, [pc, #80]	; (80005b0 <USART1_IRQHandler+0xe8>)
 8000560:	6013      	str	r3, [r2, #0]
		*(uart1_rx_buffer_memory_address + uart1_rx_buffer_current_element_pointer) = usartpointer1->RDR;
 8000562:	4b0f      	ldr	r3, [pc, #60]	; (80005a0 <USART1_IRQHandler+0xd8>)
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8000568:	4b13      	ldr	r3, [pc, #76]	; (80005b8 <USART1_IRQHandler+0xf0>)
 800056a:	681a      	ldr	r2, [r3, #0]
 800056c:	4b10      	ldr	r3, [pc, #64]	; (80005b0 <USART1_IRQHandler+0xe8>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	4413      	add	r3, r2
 8000572:	b2ca      	uxtb	r2, r1
 8000574:	701a      	strb	r2, [r3, #0]
		if ((uart1_rx_buffer_current_element_pointer == (uart1_rx_buffer_length - 1U)) && (uart1_rx_mode == UART_IT_RX_BUFFER_SINGLE)) {
 8000576:	4b0f      	ldr	r3, [pc, #60]	; (80005b4 <USART1_IRQHandler+0xec>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	1e5a      	subs	r2, r3, #1
 800057c:	4b0c      	ldr	r3, [pc, #48]	; (80005b0 <USART1_IRQHandler+0xe8>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	429a      	cmp	r2, r3
 8000582:	d10b      	bne.n	800059c <USART1_IRQHandler+0xd4>
 8000584:	4b0d      	ldr	r3, [pc, #52]	; (80005bc <USART1_IRQHandler+0xf4>)
 8000586:	781b      	ldrb	r3, [r3, #0]
 8000588:	2b00      	cmp	r3, #0
 800058a:	d107      	bne.n	800059c <USART1_IRQHandler+0xd4>
			usartpointer1->CR1 &= ~USART_CR1_RXNEIE; //if single buffer mode and wrote the last element, stop interrupts (reception ended)
 800058c:	4b04      	ldr	r3, [pc, #16]	; (80005a0 <USART1_IRQHandler+0xd8>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	681a      	ldr	r2, [r3, #0]
 8000592:	4b03      	ldr	r3, [pc, #12]	; (80005a0 <USART1_IRQHandler+0xd8>)
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	f022 0220 	bic.w	r2, r2, #32
 800059a:	601a      	str	r2, [r3, #0]
		}

	}
}
 800059c:	bf00      	nop
 800059e:	bd80      	pop	{r7, pc}
 80005a0:	20000074 	.word	0x20000074
 80005a4:	2000001c 	.word	0x2000001c
 80005a8:	20000024 	.word	0x20000024
 80005ac:	20000020 	.word	0x20000020
 80005b0:	20000064 	.word	0x20000064
 80005b4:	20000068 	.word	0x20000068
 80005b8:	20000070 	.word	0x20000070
 80005bc:	2000006c 	.word	0x2000006c

080005c0 <rcc_setup>:
void rcc_usart1(void);
void rcc_gpio_porta(void);
void rcc_gpio_portb(void);
void rcc_gpio_porti(void);

void rcc_setup(void) {
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
	rcc_usart1();
 80005c4:	f000 f808 	bl	80005d8 <rcc_usart1>
	rcc_gpio_porta();
 80005c8:	f000 f816 	bl	80005f8 <rcc_gpio_porta>
	rcc_gpio_portb();
 80005cc:	f000 f824 	bl	8000618 <rcc_gpio_portb>
	rcc_gpio_porti();
 80005d0:	f000 f832 	bl	8000638 <rcc_gpio_porti>
}
 80005d4:	bf00      	nop
 80005d6:	bd80      	pop	{r7, pc}

080005d8 <rcc_usart1>:

void rcc_usart1(void) {
 80005d8:	b480      	push	{r7}
 80005da:	af00      	add	r7, sp, #0
	RCC->APB2ENR |= RCC_APB2ENR_USART1EN; //enable clock for USART1 peripheral
 80005dc:	4b05      	ldr	r3, [pc, #20]	; (80005f4 <rcc_usart1+0x1c>)
 80005de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005e0:	4a04      	ldr	r2, [pc, #16]	; (80005f4 <rcc_usart1+0x1c>)
 80005e2:	f043 0310 	orr.w	r3, r3, #16
 80005e6:	6453      	str	r3, [r2, #68]	; 0x44
}
 80005e8:	bf00      	nop
 80005ea:	46bd      	mov	sp, r7
 80005ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop
 80005f4:	40023800 	.word	0x40023800

080005f8 <rcc_gpio_porta>:

void rcc_gpio_porta(void) {
 80005f8:	b480      	push	{r7}
 80005fa:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN; //enable clock for GPIO port A
 80005fc:	4b05      	ldr	r3, [pc, #20]	; (8000614 <rcc_gpio_porta+0x1c>)
 80005fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000600:	4a04      	ldr	r2, [pc, #16]	; (8000614 <rcc_gpio_porta+0x1c>)
 8000602:	f043 0301 	orr.w	r3, r3, #1
 8000606:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000608:	bf00      	nop
 800060a:	46bd      	mov	sp, r7
 800060c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000610:	4770      	bx	lr
 8000612:	bf00      	nop
 8000614:	40023800 	.word	0x40023800

08000618 <rcc_gpio_portb>:

void rcc_gpio_portb(void) {
 8000618:	b480      	push	{r7}
 800061a:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN; //enable clock for GPIO port B
 800061c:	4b05      	ldr	r3, [pc, #20]	; (8000634 <rcc_gpio_portb+0x1c>)
 800061e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000620:	4a04      	ldr	r2, [pc, #16]	; (8000634 <rcc_gpio_portb+0x1c>)
 8000622:	f043 0302 	orr.w	r3, r3, #2
 8000626:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000628:	bf00      	nop
 800062a:	46bd      	mov	sp, r7
 800062c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000630:	4770      	bx	lr
 8000632:	bf00      	nop
 8000634:	40023800 	.word	0x40023800

08000638 <rcc_gpio_porti>:

void rcc_gpio_porti(void){
 8000638:	b480      	push	{r7}
 800063a:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOIEN; //enable clock for GPIO port I
 800063c:	4b05      	ldr	r3, [pc, #20]	; (8000654 <rcc_gpio_porti+0x1c>)
 800063e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000640:	4a04      	ldr	r2, [pc, #16]	; (8000654 <rcc_gpio_porti+0x1c>)
 8000642:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000646:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000648:	bf00      	nop
 800064a:	46bd      	mov	sp, r7
 800064c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000650:	4770      	bx	lr
 8000652:	bf00      	nop
 8000654:	40023800 	.word	0x40023800

08000658 <usart_enable>:
#include "usart1.h"

void usart_enable(USART_TypeDef *USART) {
 8000658:	b480      	push	{r7}
 800065a:	b083      	sub	sp, #12
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
	USART->CR1 |= USART_CR1_UE; //USART1 Enable
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	f043 0201 	orr.w	r2, r3, #1
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	601a      	str	r2, [r3, #0]
}
 800066c:	bf00      	nop
 800066e:	370c      	adds	r7, #12
 8000670:	46bd      	mov	sp, r7
 8000672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000676:	4770      	bx	lr

08000678 <usart_enable_tx>:
void usart_disable(USART_TypeDef *USART) {
	USART1->CR1 &= ~USART_CR1_UE; //USART1 Disable
}
void usart_enable_tx(USART_TypeDef *USART) {
 8000678:	b480      	push	{r7}
 800067a:	b083      	sub	sp, #12
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
	USART1->CR1 |= USART_CR1_TE; // USART Transmitter enabled
 8000680:	4b05      	ldr	r3, [pc, #20]	; (8000698 <usart_enable_tx+0x20>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	4a04      	ldr	r2, [pc, #16]	; (8000698 <usart_enable_tx+0x20>)
 8000686:	f043 0308 	orr.w	r3, r3, #8
 800068a:	6013      	str	r3, [r2, #0]
}
 800068c:	bf00      	nop
 800068e:	370c      	adds	r7, #12
 8000690:	46bd      	mov	sp, r7
 8000692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000696:	4770      	bx	lr
 8000698:	40011000 	.word	0x40011000

0800069c <usart_enable_rx>:
void usart_disable_tx(USART_TypeDef *USART) {
	USART1->CR1 &= ~USART_CR1_TE; //USART Transmitter disabled
}
void usart_enable_rx(USART_TypeDef *USART) {
 800069c:	b480      	push	{r7}
 800069e:	b083      	sub	sp, #12
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
	USART1->CR1 |= USART_CR1_RE; //USART Receiver enabled
 80006a4:	4b05      	ldr	r3, [pc, #20]	; (80006bc <usart_enable_rx+0x20>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	4a04      	ldr	r2, [pc, #16]	; (80006bc <usart_enable_rx+0x20>)
 80006aa:	f043 0304 	orr.w	r3, r3, #4
 80006ae:	6013      	str	r3, [r2, #0]
}
 80006b0:	bf00      	nop
 80006b2:	370c      	adds	r7, #12
 80006b4:	46bd      	mov	sp, r7
 80006b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ba:	4770      	bx	lr
 80006bc:	40011000 	.word	0x40011000

080006c0 <usart_it_setup>:
void usart_disable_rx(USART_TypeDef *USART) {
	USART1->CR1 &= ~USART_CR1_RE; //USART Receiver disabled
}


void usart_it_setup(USART_TypeDef *USART) {
 80006c0:	b480      	push	{r7}
 80006c2:	b085      	sub	sp, #20
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
	//Set all configs to Reset Value
	USART->CR1 = 0x00;
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	2200      	movs	r2, #0
 80006cc:	601a      	str	r2, [r3, #0]
	USART->CR2 = 0x00;
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	2200      	movs	r2, #0
 80006d2:	605a      	str	r2, [r3, #4]
	USART->CR3 = 0x00;
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	2200      	movs	r2, #0
 80006d8:	609a      	str	r2, [r3, #8]
	USART->BRR = 0x00;
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	2200      	movs	r2, #0
 80006de:	60da      	str	r2, [r3, #12]
	USART->GTPR = 0x00;
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	2200      	movs	r2, #0
 80006e4:	611a      	str	r2, [r3, #16]
	USART->RQR = 0x00;
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	2200      	movs	r2, #0
 80006ea:	619a      	str	r2, [r3, #24]
	USART->ISR = 0x020000C0;
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	4a19      	ldr	r2, [pc, #100]	; (8000754 <usart_it_setup+0x94>)
 80006f0:	61da      	str	r2, [r3, #28]

	USART->CR1 &= ~(USART_CR1_M); //Set word length 8;
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	f023 2210 	bic.w	r2, r3, #268439552	; 0x10001000
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	601a      	str	r2, [r3, #0]
	USART->CR3 |= USART_CR3_OVRDIS; //disable receiver overrun error
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	689b      	ldr	r3, [r3, #8]
 8000702:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	609a      	str	r2, [r3, #8]
	USART->BRR = 0x683; //Set baudrate to 9600 (Fck = 16MHz)
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	f240 6283 	movw	r2, #1667	; 0x683
 8000710:	60da      	str	r2, [r3, #12]

	for (uint32_t i = 0; i < UART_TX_BUFFER_LENGTH; i++) {
 8000712:	2300      	movs	r3, #0
 8000714:	60fb      	str	r3, [r7, #12]
 8000716:	e007      	b.n	8000728 <usart_it_setup+0x68>
		uart1_tx_buffer[i] = 'a'; //make sure data buffer is cleared
 8000718:	4a0f      	ldr	r2, [pc, #60]	; (8000758 <usart_it_setup+0x98>)
 800071a:	68fb      	ldr	r3, [r7, #12]
 800071c:	4413      	add	r3, r2
 800071e:	2261      	movs	r2, #97	; 0x61
 8000720:	701a      	strb	r2, [r3, #0]
	for (uint32_t i = 0; i < UART_TX_BUFFER_LENGTH; i++) {
 8000722:	68fb      	ldr	r3, [r7, #12]
 8000724:	3301      	adds	r3, #1
 8000726:	60fb      	str	r3, [r7, #12]
 8000728:	68fb      	ldr	r3, [r7, #12]
 800072a:	2b3f      	cmp	r3, #63	; 0x3f
 800072c:	d9f4      	bls.n	8000718 <usart_it_setup+0x58>
	}

	uart1_tx_buffer_last_element_pointer = 0;
 800072e:	4b0b      	ldr	r3, [pc, #44]	; (800075c <usart_it_setup+0x9c>)
 8000730:	2200      	movs	r2, #0
 8000732:	601a      	str	r2, [r3, #0]
	uart1_tx_buffer_current_element_pointer = 0;
 8000734:	4b0a      	ldr	r3, [pc, #40]	; (8000760 <usart_it_setup+0xa0>)
 8000736:	2200      	movs	r2, #0
 8000738:	601a      	str	r2, [r3, #0]
	uart1_rx_buffer_current_element_pointer = 0;
 800073a:	4b0a      	ldr	r3, [pc, #40]	; (8000764 <usart_it_setup+0xa4>)
 800073c:	2200      	movs	r2, #0
 800073e:	601a      	str	r2, [r3, #0]
	usartpointer1 = USART;
 8000740:	4a09      	ldr	r2, [pc, #36]	; (8000768 <usart_it_setup+0xa8>)
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	6013      	str	r3, [r2, #0]
	//not activating transmission interrupts, activate on demand
}
 8000746:	bf00      	nop
 8000748:	3714      	adds	r7, #20
 800074a:	46bd      	mov	sp, r7
 800074c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000750:	4770      	bx	lr
 8000752:	bf00      	nop
 8000754:	020000c0 	.word	0x020000c0
 8000758:	20000024 	.word	0x20000024
 800075c:	20000020 	.word	0x20000020
 8000760:	2000001c 	.word	0x2000001c
 8000764:	20000064 	.word	0x20000064
 8000768:	20000074 	.word	0x20000074

0800076c <usart_it_sendArray>:

uint32_t usart_it_sendArray(USART_TypeDef *USART, uint8_t data[], uint32_t length) {
 800076c:	b580      	push	{r7, lr}
 800076e:	b086      	sub	sp, #24
 8000770:	af00      	add	r7, sp, #0
 8000772:	60f8      	str	r0, [r7, #12]
 8000774:	60b9      	str	r1, [r7, #8]
 8000776:	607a      	str	r2, [r7, #4]
	//returns number of elements put into buffer array
	if (length <= 0)
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	2b00      	cmp	r3, #0
 800077c:	d101      	bne.n	8000782 <usart_it_sendArray+0x16>
		return (uint32_t) 0; //idiot-proofing
 800077e:	2300      	movs	r3, #0
 8000780:	e044      	b.n	800080c <usart_it_sendArray+0xa0>
	uint32_t bytesPut = 0;
 8000782:	2300      	movs	r3, #0
 8000784:	617b      	str	r3, [r7, #20]

	//stop TXE interrupts so that pointers don't move while we do math
	USART->CR1 &= ~USART_CR1_TXEIE;
 8000786:	68fb      	ldr	r3, [r7, #12]
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800078e:	68fb      	ldr	r3, [r7, #12]
 8000790:	601a      	str	r2, [r3, #0]

	//Determine how much free space the ring buffer has (how much available to overwrite; from after last pointer around the ring and including current element)
	uint32_t max_free_space_tx_buffer = uart1_it_tx_getBufferFreeSpace();
 8000792:	f000 f845 	bl	8000820 <uart1_it_tx_getBufferFreeSpace>
 8000796:	6138      	str	r0, [r7, #16]

	//for as long as there is something to put and enough room, write data into buffer

	if (USART->ISR & USART_ISR_TC)
 8000798:	68fb      	ldr	r3, [r7, #12]
 800079a:	69db      	ldr	r3, [r3, #28]
 800079c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d017      	beq.n	80007d4 <usart_it_sendArray+0x68>
		uart1_tx_buffer_last_element_pointer--; //compensating if no communication happening, will increment in while loop
 80007a4:	4b1b      	ldr	r3, [pc, #108]	; (8000814 <usart_it_sendArray+0xa8>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	3b01      	subs	r3, #1
 80007aa:	4a1a      	ldr	r2, [pc, #104]	; (8000814 <usart_it_sendArray+0xa8>)
 80007ac:	6013      	str	r3, [r2, #0]

	while (bytesPut < length && bytesPut < max_free_space_tx_buffer) {
 80007ae:	e011      	b.n	80007d4 <usart_it_sendArray+0x68>
		uart1_tx_buffer_last_element_pointer = (uart1_tx_buffer_last_element_pointer + 1U) % UART_TX_BUFFER_LENGTH; //increment last element pointer in the ring
 80007b0:	4b18      	ldr	r3, [pc, #96]	; (8000814 <usart_it_sendArray+0xa8>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	3301      	adds	r3, #1
 80007b6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80007ba:	4a16      	ldr	r2, [pc, #88]	; (8000814 <usart_it_sendArray+0xa8>)
 80007bc:	6013      	str	r3, [r2, #0]
		uart1_tx_buffer[uart1_tx_buffer_last_element_pointer] = data[bytesPut];
 80007be:	68ba      	ldr	r2, [r7, #8]
 80007c0:	697b      	ldr	r3, [r7, #20]
 80007c2:	441a      	add	r2, r3
 80007c4:	4b13      	ldr	r3, [pc, #76]	; (8000814 <usart_it_sendArray+0xa8>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	7811      	ldrb	r1, [r2, #0]
 80007ca:	4a13      	ldr	r2, [pc, #76]	; (8000818 <usart_it_sendArray+0xac>)
 80007cc:	54d1      	strb	r1, [r2, r3]
		bytesPut++;
 80007ce:	697b      	ldr	r3, [r7, #20]
 80007d0:	3301      	adds	r3, #1
 80007d2:	617b      	str	r3, [r7, #20]
	while (bytesPut < length && bytesPut < max_free_space_tx_buffer) {
 80007d4:	697a      	ldr	r2, [r7, #20]
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	429a      	cmp	r2, r3
 80007da:	d203      	bcs.n	80007e4 <usart_it_sendArray+0x78>
 80007dc:	697a      	ldr	r2, [r7, #20]
 80007de:	693b      	ldr	r3, [r7, #16]
 80007e0:	429a      	cmp	r2, r3
 80007e2:	d3e5      	bcc.n	80007b0 <usart_it_sendArray+0x44>
	}

	if (USART->ISR & USART_ISR_TC) { //if no transmission, load the first element
 80007e4:	68fb      	ldr	r3, [r7, #12]
 80007e6:	69db      	ldr	r3, [r3, #28]
 80007e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d006      	beq.n	80007fe <usart_it_sendArray+0x92>
		USART->TDR = uart1_tx_buffer[uart1_tx_buffer_current_element_pointer];
 80007f0:	4b0a      	ldr	r3, [pc, #40]	; (800081c <usart_it_sendArray+0xb0>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	4a08      	ldr	r2, [pc, #32]	; (8000818 <usart_it_sendArray+0xac>)
 80007f6:	5cd3      	ldrb	r3, [r2, r3]
 80007f8:	461a      	mov	r2, r3
 80007fa:	68fb      	ldr	r3, [r7, #12]
 80007fc:	629a      	str	r2, [r3, #40]	; 0x28
	}

	USART->CR1 |= USART_CR1_TXEIE; //activate interrupts again
 80007fe:	68fb      	ldr	r3, [r7, #12]
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8000806:	68fb      	ldr	r3, [r7, #12]
 8000808:	601a      	str	r2, [r3, #0]

	return bytesPut; //return how many bytes were written to buffer array
 800080a:	697b      	ldr	r3, [r7, #20]
}
 800080c:	4618      	mov	r0, r3
 800080e:	3718      	adds	r7, #24
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}
 8000814:	20000020 	.word	0x20000020
 8000818:	20000024 	.word	0x20000024
 800081c:	2000001c 	.word	0x2000001c

08000820 <uart1_it_tx_getBufferFreeSpace>:
uint32_t uart1_it_tx_getBufferFreeSpace(void) {
 8000820:	b480      	push	{r7}
 8000822:	af00      	add	r7, sp, #0
	if (uart1_tx_buffer_last_element_pointer > uart1_tx_buffer_current_element_pointer) {
 8000824:	4b0f      	ldr	r3, [pc, #60]	; (8000864 <uart1_it_tx_getBufferFreeSpace+0x44>)
 8000826:	681a      	ldr	r2, [r3, #0]
 8000828:	4b0f      	ldr	r3, [pc, #60]	; (8000868 <uart1_it_tx_getBufferFreeSpace+0x48>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	429a      	cmp	r2, r3
 800082e:	d906      	bls.n	800083e <uart1_it_tx_getBufferFreeSpace+0x1e>
		return (UART_TX_BUFFER_LENGTH - (uart1_tx_buffer_last_element_pointer - uart1_tx_buffer_current_element_pointer));
 8000830:	4b0d      	ldr	r3, [pc, #52]	; (8000868 <uart1_it_tx_getBufferFreeSpace+0x48>)
 8000832:	681a      	ldr	r2, [r3, #0]
 8000834:	4b0b      	ldr	r3, [pc, #44]	; (8000864 <uart1_it_tx_getBufferFreeSpace+0x44>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	1ad3      	subs	r3, r2, r3
 800083a:	3340      	adds	r3, #64	; 0x40
 800083c:	e00c      	b.n	8000858 <uart1_it_tx_getBufferFreeSpace+0x38>
	} else if (uart1_tx_buffer_last_element_pointer < uart1_tx_buffer_current_element_pointer) {
 800083e:	4b09      	ldr	r3, [pc, #36]	; (8000864 <uart1_it_tx_getBufferFreeSpace+0x44>)
 8000840:	681a      	ldr	r2, [r3, #0]
 8000842:	4b09      	ldr	r3, [pc, #36]	; (8000868 <uart1_it_tx_getBufferFreeSpace+0x48>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	429a      	cmp	r2, r3
 8000848:	d205      	bcs.n	8000856 <uart1_it_tx_getBufferFreeSpace+0x36>
		return ((uart1_tx_buffer_current_element_pointer - uart1_tx_buffer_last_element_pointer));
 800084a:	4b07      	ldr	r3, [pc, #28]	; (8000868 <uart1_it_tx_getBufferFreeSpace+0x48>)
 800084c:	681a      	ldr	r2, [r3, #0]
 800084e:	4b05      	ldr	r3, [pc, #20]	; (8000864 <uart1_it_tx_getBufferFreeSpace+0x44>)
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	1ad3      	subs	r3, r2, r3
 8000854:	e000      	b.n	8000858 <uart1_it_tx_getBufferFreeSpace+0x38>
	}
	return (UART_TX_BUFFER_LENGTH);
 8000856:	2340      	movs	r3, #64	; 0x40

}
 8000858:	4618      	mov	r0, r3
 800085a:	46bd      	mov	sp, r7
 800085c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000860:	4770      	bx	lr
 8000862:	bf00      	nop
 8000864:	20000020 	.word	0x20000020
 8000868:	2000001c 	.word	0x2000001c

0800086c <usart_it_receiveArray>:

void usart_it_receiveArray(USART_TypeDef *USART, uint8_t data[], uint32_t length, uint8_t mode) {
 800086c:	b480      	push	{r7}
 800086e:	b085      	sub	sp, #20
 8000870:	af00      	add	r7, sp, #0
 8000872:	60f8      	str	r0, [r7, #12]
 8000874:	60b9      	str	r1, [r7, #8]
 8000876:	607a      	str	r2, [r7, #4]
 8000878:	70fb      	strb	r3, [r7, #3]
	if (length <= 0 || mode > 1 || mode < 0)
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	2b00      	cmp	r3, #0
 800087e:	d022      	beq.n	80008c6 <usart_it_receiveArray+0x5a>
 8000880:	78fb      	ldrb	r3, [r7, #3]
 8000882:	2b01      	cmp	r3, #1
 8000884:	d81f      	bhi.n	80008c6 <usart_it_receiveArray+0x5a>
		return; //idiotproofing
	uart1_rx_buffer_current_element_pointer = -1U; //will be turned to 0 on reception
 8000886:	4b13      	ldr	r3, [pc, #76]	; (80008d4 <usart_it_receiveArray+0x68>)
 8000888:	f04f 32ff 	mov.w	r2, #4294967295
 800088c:	601a      	str	r2, [r3, #0]
	uart1_rx_buffer_length = length;
 800088e:	4a12      	ldr	r2, [pc, #72]	; (80008d8 <usart_it_receiveArray+0x6c>)
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	6013      	str	r3, [r2, #0]
	uart1_rx_buffer_memory_address = data;
 8000894:	4a11      	ldr	r2, [pc, #68]	; (80008dc <usart_it_receiveArray+0x70>)
 8000896:	68bb      	ldr	r3, [r7, #8]
 8000898:	6013      	str	r3, [r2, #0]
	uart1_rx_mode = mode;
 800089a:	4a11      	ldr	r2, [pc, #68]	; (80008e0 <usart_it_receiveArray+0x74>)
 800089c:	78fb      	ldrb	r3, [r7, #3]
 800089e:	7013      	strb	r3, [r2, #0]
	if (USART->ISR & USART_ISR_RXNE) {
 80008a0:	68fb      	ldr	r3, [r7, #12]
 80008a2:	69db      	ldr	r3, [r3, #28]
 80008a4:	f003 0320 	and.w	r3, r3, #32
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d005      	beq.n	80008b8 <usart_it_receiveArray+0x4c>
		USART->RQR |= USART_RQR_RXFRQ; //if RDR is not empty, we need to flush it & clear RXNE flag
 80008ac:	68fb      	ldr	r3, [r7, #12]
 80008ae:	699b      	ldr	r3, [r3, #24]
 80008b0:	f043 0208 	orr.w	r2, r3, #8
 80008b4:	68fb      	ldr	r3, [r7, #12]
 80008b6:	619a      	str	r2, [r3, #24]

	}
	USART->CR1 |= USART_CR1_RXNEIE; //activate interrupt on byte received
 80008b8:	68fb      	ldr	r3, [r7, #12]
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	f043 0220 	orr.w	r2, r3, #32
 80008c0:	68fb      	ldr	r3, [r7, #12]
 80008c2:	601a      	str	r2, [r3, #0]
 80008c4:	e000      	b.n	80008c8 <usart_it_receiveArray+0x5c>
		return; //idiotproofing
 80008c6:	bf00      	nop
}
 80008c8:	3714      	adds	r7, #20
 80008ca:	46bd      	mov	sp, r7
 80008cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d0:	4770      	bx	lr
 80008d2:	bf00      	nop
 80008d4:	20000064 	.word	0x20000064
 80008d8:	20000068 	.word	0x20000068
 80008dc:	20000070 	.word	0x20000070
 80008e0:	2000006c 	.word	0x2000006c

080008e4 <usart_it_stopReceiveArray>:

void usart_it_stopReceiveArray(USART_TypeDef *USART) {
 80008e4:	b480      	push	{r7}
 80008e6:	b083      	sub	sp, #12
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
	USART->CR1 &= ~USART_CR1_RXNEIE; //disable reception interrupt
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	f023 0220 	bic.w	r2, r3, #32
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	601a      	str	r2, [r3, #0]

}
 80008f8:	bf00      	nop
 80008fa:	370c      	adds	r7, #12
 80008fc:	46bd      	mov	sp, r7
 80008fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000902:	4770      	bx	lr

08000904 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000904:	480d      	ldr	r0, [pc, #52]	; (800093c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000906:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000908:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800090c:	480c      	ldr	r0, [pc, #48]	; (8000940 <LoopForever+0x6>)
  ldr r1, =_edata
 800090e:	490d      	ldr	r1, [pc, #52]	; (8000944 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000910:	4a0d      	ldr	r2, [pc, #52]	; (8000948 <LoopForever+0xe>)
  movs r3, #0
 8000912:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000914:	e002      	b.n	800091c <LoopCopyDataInit>

08000916 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000916:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000918:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800091a:	3304      	adds	r3, #4

0800091c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800091c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800091e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000920:	d3f9      	bcc.n	8000916 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000922:	4a0a      	ldr	r2, [pc, #40]	; (800094c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000924:	4c0a      	ldr	r4, [pc, #40]	; (8000950 <LoopForever+0x16>)
  movs r3, #0
 8000926:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000928:	e001      	b.n	800092e <LoopFillZerobss>

0800092a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800092a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800092c:	3204      	adds	r2, #4

0800092e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800092e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000930:	d3fb      	bcc.n	800092a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000932:	f000 f811 	bl	8000958 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000936:	f7ff fd0f 	bl	8000358 <main>

0800093a <LoopForever>:

LoopForever:
    b LoopForever
 800093a:	e7fe      	b.n	800093a <LoopForever>
  ldr   r0, =_estack
 800093c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000940:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000944:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000948:	08000a3c 	.word	0x08000a3c
  ldr r2, =_sbss
 800094c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000950:	20000078 	.word	0x20000078

08000954 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000954:	e7fe      	b.n	8000954 <ADC_IRQHandler>
	...

08000958 <__libc_init_array>:
 8000958:	b570      	push	{r4, r5, r6, lr}
 800095a:	4d0d      	ldr	r5, [pc, #52]	; (8000990 <__libc_init_array+0x38>)
 800095c:	4c0d      	ldr	r4, [pc, #52]	; (8000994 <__libc_init_array+0x3c>)
 800095e:	1b64      	subs	r4, r4, r5
 8000960:	10a4      	asrs	r4, r4, #2
 8000962:	2600      	movs	r6, #0
 8000964:	42a6      	cmp	r6, r4
 8000966:	d109      	bne.n	800097c <__libc_init_array+0x24>
 8000968:	4d0b      	ldr	r5, [pc, #44]	; (8000998 <__libc_init_array+0x40>)
 800096a:	4c0c      	ldr	r4, [pc, #48]	; (800099c <__libc_init_array+0x44>)
 800096c:	f000 f818 	bl	80009a0 <_init>
 8000970:	1b64      	subs	r4, r4, r5
 8000972:	10a4      	asrs	r4, r4, #2
 8000974:	2600      	movs	r6, #0
 8000976:	42a6      	cmp	r6, r4
 8000978:	d105      	bne.n	8000986 <__libc_init_array+0x2e>
 800097a:	bd70      	pop	{r4, r5, r6, pc}
 800097c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000980:	4798      	blx	r3
 8000982:	3601      	adds	r6, #1
 8000984:	e7ee      	b.n	8000964 <__libc_init_array+0xc>
 8000986:	f855 3b04 	ldr.w	r3, [r5], #4
 800098a:	4798      	blx	r3
 800098c:	3601      	adds	r6, #1
 800098e:	e7f2      	b.n	8000976 <__libc_init_array+0x1e>
 8000990:	08000a34 	.word	0x08000a34
 8000994:	08000a34 	.word	0x08000a34
 8000998:	08000a34 	.word	0x08000a34
 800099c:	08000a38 	.word	0x08000a38

080009a0 <_init>:
 80009a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80009a2:	bf00      	nop
 80009a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80009a6:	bc08      	pop	{r3}
 80009a8:	469e      	mov	lr, r3
 80009aa:	4770      	bx	lr

080009ac <_fini>:
 80009ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80009ae:	bf00      	nop
 80009b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80009b2:	bc08      	pop	{r3}
 80009b4:	469e      	mov	lr, r3
 80009b6:	4770      	bx	lr
